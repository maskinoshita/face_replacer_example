service: face-replacer

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x

# you can overwrite defaults here
#  stage: dev
  region: ap-northeast-1

  # LambdaのIAMロール
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - !Ref OriginalBucket
                - "/*"
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - !Ref ProcessedBucket
                - "/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource:
            - !GetAtt ItemListTable.Arn
        - Effect: "Allow"
          Action:
            - "rekognition:*"
          Resource:
            - "*"

  # 加工済みの画像の保存先
  environment:
    processed_bucket: !Ref ProcessedBucket

custom:
  # 重要!!! 一意の名前をつけてください !!!
  suffix: "mk"
  # s3-sync pluginの設定
  webSiteName: face-replacer-${self:custom.suffix}

# デプロイパッケージに関する設定
package:
 patterns:
   - '!static/**' # 静的リソースはデプロイパッケージに含めない

functions:
  face_replacer:
    handler: face_replacer.face_replacer
    events:
      - s3:
          bucket: !Ref OriginalBucket
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg
          existing: true
  query:
    handler: query.query
    events:
      - httpApi:
          path: /search
          method: get

resources:
  Resources:
    # 元画像を保存するS3バケット
    OriginalBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "20220527-original-${self:custom.suffix}-${sls:stage}"
    
    # 加工済み画像を保存するS3バケット
    ProcessedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webSiteName}-${sls:stage}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    
    # 静的ウェブサイトホスティング用バケットポリシー (加工済み画像のS3バケット)
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProcessedBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref ProcessedBucket
                    - "/*"
    
    # 加工済み画像の情報を持つDynamoDBテーブル
    ItemListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-item-list-${sls:stage}
        
  # CloudFormationの出力 (別のCFnやServerlessFWから参照できる値)
  Outputs:
    OriginalBucketName:
      Description: "元の顔画像の保存先バケット"
      Value: !Ref OriginalBucket
    ProcessedBucketName:
      Description: "加工済みの顔画像とWebページの保存先バケット"
      Value: !Ref ProcessedBucket
    StaticWebSiteUrl:
      Description: "静的ウェブサイトホスティングのURL"
      Value:
        Fn::Join:
          - ""
          - - "http://"
            - ${self:custom.webSiteName}-${sls:stage}
            - ".s3-website-"
            - ${aws:region}
            - ".amazonaws.com"

